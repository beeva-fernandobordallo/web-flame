<div class="page">
  <div class="amber lighten-2">
    <div class="container" style="padding-bottom:8px">
        <h1 id="jumpTitle" class="header thin" {{action 'focus' 'jumpTitle' 'bounce' 'slow'}} style="padding-top:60px">
          <i>Routes</i>
        </h1>
    </div>
  </div>
  <div class="amber darken-3 z-depth-1">
    <section class="center">
      <div class="containerthin" style="margin: 0; padding:15px 0;">
        <h6 class="header thin">
          Generic routes used to centralize repetitive methods, security checks and transition animations.
        </h6>
      </div>
    </section>
  </div>

  <div class="container">
    <section>
      <h4 class="thin">
        Base.js Route
      </h4>
      <p>
        Routes make for the basic building blocks in the ember philosophy. One route, one URL, one model. In an
        attempt to simplify developers lives, we have created a base route from which one can extend, taking
        advantage of:
        <ol>
          <li>Generic <b>entry and exit page transitions</b> for the entire app</li>
          <li><b>Authentication</b> and <b>rol check</b> per route</li>
        </ol>
      </p>
      <p>
        Extending from this base route is very simple and the code needed only depends on the 'depth'
        of the route itself. What do we mean by this? Well, if your route is found directly inside the
        <i>'routes'</i> folder (not nested), you would replace the basic route code with the following:
      </p>
      <blockquote>
        <pre>
import Base from './base';

export default Base.extend({
});
        </pre>
      </blockquote>
      <p>
        However, if your route is nested, you will have to locate the base.js file adding a little bit of
        folder navigation. For example, if your route is nested in the folder <i>'routes/users/dataRoutes/'</i>, the
        code needed to extend from the base route will be the following:
      </p>
      <blockquote>
        <pre>
import Base from './../../base';

export default Base.extend({
});
        </pre>
      </blockquote>

      <p>
        As you can see, the difference lies in the first line (<i>import Base from './../../base'</i>). If your
        route file is in the same folder as the base route, use <i>'./base'</i>. Else, if nested, add <i>'../'</i> for
        every level of 'depth'. Easy, right?
      </p>
      <p>
        <b>Warning:</b> There is a small detail without which a newly created route, extending from the base route,
        WON'T WORK! Give the default configuration that comes with the 'base.js' route, the animation service will
        look for an element on the page with a 'page' class attribute. If not found, the route will show a blank
        screen and the app will enter a blocked state.
      </p>
      <p>
        But fear not, there is a very simple solution. When you create a new route (most likely using the
        ember cli route generator), two main files will be created: one in the 'routes' folder and another in
        the 'templates' folder. The template will initially contain one line of code:
      </p>
      <blockquote>
        <pre>
&#123;{outlet}}
        </pre>
      </blockquote>
      <p>
        Replace it with:
      </p>
      <blockquote>
        <pre>
&lt;div class="page">
  &#123;{outlet}}
&lt;/div>
        </pre>
      </blockquote>
    </section>

    <br>
    <br>
    <br>
    <div class="divider">

    </div>
    <div class="divider">

    </div>

    <section>
      <h4 class="thin">
        Configure a baseExtended Route
      </h4>
      <p>
        The route comes with a few preconfigured with the following defaults:
        <ol>
          <li><b>Authentication</b> not active: 'false'</li>
          <li><b>Security level</b> at cero: 'null'</li>
          <li>Entry transition: 'fadeInRightBig'</li>
          <li>Exit transition: 'fadeOutRightBig'</li>
        </ol>
      </p>
      <p>
        These defaults can be easily modified by setting a few parameters on the route and/or overwritting
        the 'didTransition' and 'willTransition' action methods that implement them.
      </p>
      <p>
        Next we see an example of a route being extended from the generic base route and configured to
        require the user to be logged in, have a security level of <i>2</i> and to run a 'fade' animation
        both on page exit and page entry.
      </p>
      <blockquote>
        <pre>
import Base from './base';

export default Base.extend({
  auth: true,
  securityLevel: 2,

  beforeModel: function(){
    return this._super().then(function(){
      // Run this code after the authentication and security level checks have completed
    });
  },

  actions: {
      didTransition: function() {
        this.Animate.entryPage('.page', 'fadeIn');
      },

      willTransition: function(transition){
        this.Animate.exitPage('.page','fadeOut', transition);
      }
  }
});
        </pre>
      </blockquote>
      <p>
        Top to bottom, we read the code as follows:
        <ul>
          <li><b><i>Auth</i> property</b>: {Boolean}. If <i>true</i>, the route checks if the user is
          correctly authenticated. Otherwise (<i>false</i>), the user will be able to enter the page with
          no further security check.</li>
          <li><b><i>securityLevel</i> property</b>: {Number}. If se to <i>null</i> no security level check will
          be run agains the currently logged user. Otherwise, the property will be able to take vales greater than or equal
          to zero (<i>&gt;0</i>)</li>
          <li><b>beforeModel</b>: the base route implements the basic user and security level checks in the
          beforeModel hook, enveloping all of these inside a <i>Promsise</i>. This allows the developer to place
          additional code before and after the security checks take place. In the example you can see a comment
          explaining the correct place to introduce additional code after the security checks take place.</li>
          <li><b>actions Hash</b>: In the actionsHash we can overwrite the willTransition and didTransition methods
          which, by default, are in charge of launching the page entry and exit animations.
          <br>
          <br>
          <small>For more information on transition animations, read the documentation for
          {{link-to 'the animation service' 'v1.en.servicios'}}</small></li>
        </ul>
      </p>
    </section>

    <br>
    <br>
    <div class="divider">

    </div>
    <div class="divider">

    </div>

    <section>
      <h4 class="thin">
        ApplicationRoute (Route ... yo soy tu padre!)
      </h4>
      <p>
        La applicationRoute, ubicada en la carpeta 'routes' con el nombre <i>application.js</i>,
        es la primera ruta llamada cuando se inicia la applicación (o se accede a ella). <i>Solo se llama
        una vez a esta ruta</i>, por lo tanto utilizamos los hooks de esta ruta para inicializar la applicación
        y hacer verificaciones de entrada.
      </p>
      <br>
      <h5 class="thin">Inicialización</h5>
      <p>
        En primer lugar, se lanza el hook 'beforeModel' de la ruta. En el empezamos por configurar
        el idioma de la app en función de la configuración local del usuario:
      </p>
      <blockquote>
        <pre>
this.set('i18n.locale', navigator.language || navigator.userLanguage || 'es');
        </pre>
      </blockquote>
      <p>
        En caso de no encontrar una configuración local, se caería al valor por defecto. En este caso, Español (es).
      </p>
      <p>
        A continuación utilizamos el método de inicialización del servicio de datos (datapoint service), encargado
        de configurar los puntos de acceso a datos y comprobar si existe un usuario autenticado. Como valores predeterminados,
        guardamos referencias a los siguientes puntos de datos:
      </p>
      <ol>
        <li>Firebase Root: <i>baseRef</i></li>
        <li>Nodo comunitario: <i>communityRef</i></li>
        <li>Nodo de datos publicos: <i>publicRef</i></li>
        <li>Nodo de presencia (usuarios conectados): <i>presenceRef</i></li>
      </ol>
      <blockquote>
<pre>
this.set('baseRef', new Firebase(this.get('firebase')));
this.set('communityRef', new Firebase(this.get('firebase') + '/community'));
this.set('publicRef', new Firebase(this.get('firebase') + '/public'));
this.set('presentUsersRef', new Firebase(this.get('firebase') + '/presence'));
</pre>
      </blockquote>
      <p>
        En caso de encontrar a un usuario autenticado, se guardará también una referencia al nodo de datos del usuario, <i>userRef</i>:
      </p>
      <blockquote>
        <pre>
this.set('userRef', new Firebase(userUrl));
        </pre>
      </blockquote>
      <p>
        Adicionalmente, se realizará una comprobración de 'perfil mínimo'. En caso de no tener datos del usuario, se
        guardará una configuración básica de perfil en el nodo privado del usuario.
      </p>
      <p>
        <b>Estas referencias a los puntos de datos en Firebase serán de gran ayuda durante el desarrollo ya que serán las
        referencias utilizadas por los métodos CRUD definidos en el servicio de datos (datapoint).</b>
        <br>
        <small>Para leer más información sobre el servicio de datos, vaya los {{link-to 'docs de servicios' 'v1.es.servicios'}}</small>
      </p>
      <br>
      <h5 class="thin">Acciones Genéricas</h5>
      <p>
        Con el fin de simplificar la interacción con las funcionalidades genéricas del stack
        disponemos de una serie de acciones genéricas, implementadas en la applicationRoute.
      </p>
      <h5>signIn(provider)</h5>
      <p>
        La accion genérica 'signIn' requiere de un solo parámetro: 'provider'. Se encarga de autenticar
        al usuario con Firebase a través del proveedor indicado.
        Este Parámetro puede ser uno todos los que ponen a nuestra disposición los miembres de Firebase
        en su API Javascript:
      </p>
      <ol>
        <li>github</li>
        <li>facebook</li>
        <li>twitter</li>
        <li>google</li>
      </ol>
      <p>
        Recordar que cualquier autenticación con una red social requiere de una <b>configuración previa</b>
        de la cuenta de firebase, en la que se active la autenticación con la red definida.
        Puedes encontrar las guías de AUTENTICACIÓN de firebase <a href="https://www.firebase.com/docs/web/guide/user-auth.html#section-providers" target="_blank">AQUÍ</a>,
        en la sección de proveedores.
      </p>
      <p>
        El código de la acción genérica utiliza el método 'signIn' definido en el servicio de datos (fácil de utilizar desde cualquier otro punto de la aplicación):
      </p>
      <blockquote>
        <pre>
signIn: function(provider) {
  this.Data.signIn(provider);
}
        </pre>
      </blockquote>
      <h5>signOut()</h5>
      <p>
        La accion genérica 'signOut' no requiere de ningún parámetro. Deslogará a cualquier usuario actualmente
        autenticado, independientemente del proveedor utilizado.
      </p>
      <p>
        El código de la acción genérica utiliza el método 'signOut' definido en el servicio de datos (fácil de utilizar desde cualquier otro punto de la aplicación):
      </p>
      <blockquote>
        <pre>
signOut: function() {
  this.Data.signOut();
}
        </pre>
      </blockquote>
      <h5>redirectHome()</h5>
      <p>
        Acción común a casi todas las aplicaciones, disparada cuando un usuario pulsa el logo de la
        app, cabecera u otro punto considerado de regreso al acceso principal.
      </p>
      <p>
        El código de la acción genérica 'redirectHome' también cierra el SideNav génerico que
        utilizamos como parte de la plantilla inicial (opcional):
      </p>
      <blockquote>
        <pre>
redirectHome: function(){
  this.transitionTo('index');
  // Hide sideNav
  $('.button-collapse').sideNav('hide');
}
        </pre>
      </blockquote>
      <h5>setLocale(locale)</h5>
      <p>
        Esta acción modifica el idioma utilizado por el servicio de traducción, adaptando
        los contenidos de la página al idioma seteado.
      </p>
      <p>
        Recibe como parámetro la abreviación del idioma a utilizar ('en', 'es', 'ger', ...). Dejamos abierta
        la opción de lanzar una notifación de aviso al usuario con el cambio de idioma, en la que se
        presentará un string definido en los archivos de traducción. En nuestro caso, utilizamos el string
        'languageChange', ubicado dentro del bloque de 'label's.
      </p>
      <blockquote>
        <pre>
setLocale: function (locale) {
  this.set('i18n.locale', locale);
  // this.Toast.addToast(this.get('i18n').t('label.languageChange'), 2000);
}
        </pre>
      </blockquote>
      <h5>focus(id, animation, speed)</h5>
      <p>
        Utilizamos esta acción genérica para lanzar una animación de énfasis. Basada en el uso del método
        'go()', encontrado en el serivicio de animación (<i>Animate</i>).
      </p>
      <p>
        Recibe como parámetros:
      </p>
      <ol>
        <li><b>ID</b> del nodo a animar</li>
        <li><b>Animación</b> a utilizar (puedes ver la lista de animaciones disponibles en la web de <a href="https://daneden.github.io/animate.css/">animate.css</a> o en los cheatsheets)</li>
        <li><b>Velocidad</b> de la animación. A elegir entre: <i>'slow', 'normal' y 'fast'</i></li>
      </ol>
      <blockquote>
        <pre>
focus: function(id, animation, speed){
  id = '#' + id;
  this.Animate.go(id,animation,speed);
}
        </pre>
      </blockquote>
    </section>
  </div>

  {{outlet}}
</div>
