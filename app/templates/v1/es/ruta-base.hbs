<div class="page">
  <div class="amber lighten-2">
    <div class="container" style="padding-bottom:8px">
        <h1 id="jumpTitle" class="header thin" {{action 'focus' 'jumpTitle' 'bounce' 'slow'}} style="padding-top:60px">
          <i>Rutas</i>
        </h1>
    </div>
  </div>
  <div class="amber darken-3 z-depth-1">
    <section class="center">
      <div class="containerthin" style="margin: 0; padding:15px 0;">
        <h6 class="header thin">
          Ruta genérica utilizada para automatizar procesos de verificación de seguridad en acceso a rutas y controlar las animaciones de transición entre páginas.
        </h6>
      </div>
    </section>
  </div>

  <div class="container">
    <section>
      <h4 class="thin">
        Ruta Base.js
      </h4>
      <p>
        Las rutas forman la base fundamental de la filosofía de Ember. Una ruta, una URL, un modelo. En un
        intento de facilitar la vida al desarrollador, hemos creado una ruta de la que poder extender cualquier
        ruta que requiera de:
        <ol>
          <li>Una <b>transición de entrada/salida</b> genérica de la applicación</li>
          <li><b>Autenticación</b> o un <b>nivel de seguridad</b> (rol) concreto</li>
        </ol>
      </p>
      <p>
        Extender una ruta de esta es muy sencillo y el código a utilizar solo depende de la 'profundidad'
        de la ruta. ¿Que queremos decir con esto? Muy fácil. Si tu ruta se encuentra en la carpeta <i>'routes'</i>,
        sin estár anidada, utilizarás el siguiente código
      </p>
      <blockquote>
        <pre>
import Base from './base';

export default Base.extend({
});
        </pre>
      </blockquote>
      <p>
        Sin embargo, si tu ruta está anidada habrás de localizar el archivo base.js de manera distinta. Por ejemplo,
        si tu ruta se encuentra en la carpeta <i>'routes/users/dataRoutes/'</i>, el código para extender tu ruta de la base
        sería el siguiente
      </p>
      <blockquote>
        <pre>
import Base from './../../base';

export default Base.extend({
});
        </pre>
      </blockquote>

      <p>
        Como ves, la diferencia radica solo en <i>import Base from './../../base'</i>. Si tu archivo de ruta ser encuentra
        en la misma altura que la ruta base, solo habrás de utilizar <i>'./base'</i>. Si está anidada, tendrás que añadir <i>'../'</i> por cada
        nivel de profundidad alcanzado. Sencillo, ¿verdad?
      </p>
    </section>

    <br>
    <br>
    <br>
    <div class="divider">

    </div>
    <div class="divider">

    </div>

    <section>
      <h4 class="thin">
        Configuración de ruta
      </h4>
      <p>
        La ruta base viene con una configuración básica por defecto. Esta es:
        <ol>
          <li><b>Autenticación</b> no activada</li>
          <li>Nivel de <b>seguridad</b> nulo</li>
          <li>Transición de entrada: fadeInRightBig</li>
          <li>Transición de salida: fadeOutRightBig</li>
        </ol>
      </p>
      <p>
        Sin embargo, estos comportamientos pueden ser parametrizados en la ruta con un par del
        propiedades o sobreescribiendo los métodos/acciones que los implementan.
      </p>
      <p>
        Vemos un ejemplo de una ruta que extiende de la ruta base y ha sido configurada para
        exigir login al usuario, tener un nivel de seguridad de <i>2</i> y que al entrar o salir de la
        página, se lance una animación de <i>fade</i> básica.
      </p>
      <blockquote>
        <pre>
import Base from './base';

export default Base.extend({
  auth: true,
  securityLevel: 2,

  beforeModel: function(){
    return this._super().then(function(){
      // Run this code after the authentication and security Level checks have completed
    });
  },

  actions: {
      didTransition: function() {
        this.Animate.entryPage('.page', 'fadeIn');
      },

      willTransition: function(transition){
        this.Animate.exitPage('.page','fadeOut', transition);
      }
  }
});
        </pre>
      </blockquote>
      <p>
        Desde arriba hasta abajo vemos:
        <ul>
          <li><b>Propiedad auth</b>: {Boolean}. Si <i>true</i>, la ruta comprueba que el usuario
          esté correctamente autenticado. De lo contrario (<i>false</i>), no se exigirá al usuario
          login previo y se obviará la siguiente propiedad.</li>
          <li><b>Propiedad securityLevel</b>: {Number}. Si configurado a <i>null</i> no realizará ninguna
          verificación del nivel de usuario logado. De lo contrario, podrá tomar valores numéricos mayores o iguales
          a cero.</li>
          <li><b>beforeModel</b>: La ruta base implementa los metodos de verificación de login
          y nivel de seguridad en el beforeModel, envolviendo todo el proceso en una promesa. Esto
          nos permite introducir código, antes durante y después de la llamada. En el ejemplo, presentamos
          el lugar indicado para introducir código a ejecutar después de las verificaciones de seguridad.</li>
          <li><b>actions Hash</b>: En el actionsHash sobreescribimos los métodos didTransition y willTransition,
          encargadas de lanzar las animaciones de entrada y salida de página.
          <br>
          <br>
          <small>Para más información sobre
          animaciones de transición, lea los docs sobre el {{link-to 'serivicio de animaciones' 'v1.es.servicios'}}</small></li>
        </ul>
      </p>
    </section>

    <br>
    <br>
    <div class="divider">

    </div>
    <div class="divider">

    </div>

    <section>
      <h4 class="thin">
        ApplicationRoute (route ... yo soy tu padre!)
      </h4>
      <p>
        <i>TODO</i>
      </p>
      <blockquote>

      </blockquote>
      <p>

      </p>
    </section>




  </div>

  {{outlet}}
</div>
